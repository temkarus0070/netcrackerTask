import org.junit.Assert;
import org.junit.Test;
import temkarus0070.firstTask.models.Person;
import temkarus0070.firstTask.models.contract.Contract;
import temkarus0070.firstTask.models.contract.DigitalTelevisionContract;
import temkarus0070.firstTask.models.contract.MobileConnectionContract;
import temkarus0070.firstTask.models.contract.WireInternetContract;
import temkarus0070.firstTask.repository.ArrayListImpl;
import temkarus0070.firstTask.repository.ContractRepositoryImpl;

import java.util.*;

public class RepositoryTest {
    Person person = new Person();
    Random random = new Random(1999);
    private Collection<Contract> contracts;

    /**
     * simple test of adding function in contract repository
     */
    @Test
    public void testAdding() {
        Long num = random.nextLong();
        ContractRepositoryImpl repository = new ContractRepositoryImpl();
        Contract contract = new DigitalTelevisionContract();
        contract.setId(num);
        contract.setContractOwner(person);
        repository.add(contract);
        Assert.assertSame(repository.get(num).get(), contract);
        repository.remove(num);
    }

    /**
     * Test getting function in contract repository when we create new repository after adding contract
     */

    @Test
    public void testGetting() {
        Long num = random.nextLong();
        ContractRepositoryImpl repository = new ContractRepositoryImpl();
        Contract contract = new DigitalTelevisionContract();
        contract.setId(num);
        contract.setContractOwner(person);
        repository.add(contract);
        Assert.assertSame(repository.get(num).get(), contract);
        repository.remove(num);
    }

    /**
     * Test remove function in repository
     */
    @Test
    public void testRemove() {
        int num = random.nextInt(3000);
        ContractRepositoryImpl repository = new ContractRepositoryImpl();
        Contract contract = new DigitalTelevisionContract();
        contract.setId(num);
        contract.setContractOwner(person);
        repository.add(contract);
        repository.remove((long) num);
        Assert.assertTrue(repository.get((long) num).isEmpty());
    }

    /**
     * Test adding function in repository for ability to work with a lot of contracts
     */
    @Test
    public void addManyContracts() {
        ContractRepositoryImpl repository = new ContractRepositoryImpl();
        Collection<Contract> contractCollection = generateBigCollectionOfContracts();
        contractCollection.forEach(contract -> repository.add(contract));
        for (Contract contract : contractCollection) {
            Assert.assertTrue(repository.get(contract.getId()).isPresent());
        }
        for (Contract contract : contractCollection) {
            repository.remove(contract.getId());
        }


    }

    /**
     * Test remove function in repository for ability to work with a lot of contracts
     */
    @Test
    public void removeManyContracts() {
        ContractRepositoryImpl repository = new ContractRepositoryImpl();
        Collection<Contract> contractCollection = generateBigCollectionOfContracts();
        contractCollection.forEach(contract -> repository.add(contract));
        for (Contract contract : contractCollection) {
            repository.remove(contract.getId());
            boolean b = repository.get(contract.getId()).isEmpty();
            Assert.assertTrue(repository.get(contract.getId()).isEmpty());
        }
    }

    /**
     * Generate big Collection of contracts with unique identifiers are generated by random.nextInt function  for first calling
     * and after first calling return previous generated Collection
     *
     * @return MyArrayList with a lot of contracts
     */
    private Collection<Contract> generateBigCollectionOfContracts() {
        if (contracts == null) {
            int n = random.nextInt(20000);
            HashSet<Integer> usedIds = new HashSet<>();
            usedIds.add(0);
            Collection<Contract> contractCollection = new ArrayListImpl();
            for (int i = 0; i < n; i++) {
                int choice = random.nextInt(3);
                Contract contract = null;
                int id = 0;
                do {
                    id = random.nextInt(100000000);
                }
                while (usedIds.contains(id));
                usedIds.add(id);
                switch (choice) {
                    case 0:
                        contract = new DigitalTelevisionContract();
                        break;
                    case 1:
                        contract = new MobileConnectionContract();
                        break;
                    case 2:
                        contract = new WireInternetContract();
                        break;
                }
                contract.setId(id);
                contract.setContractOwner(person);
                contractCollection.add(contract);
            }
            contracts = contractCollection;
            return contractCollection;
        } else return contracts;
    }
}

